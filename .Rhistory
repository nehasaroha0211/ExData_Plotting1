head(colors)
head(colours)
colours[1]
colours()[1]
head(colours())
colours()[grep("red", colours())]
colours()[2]
?grep
data(diamonds)
data("diamonds")
install.packages("ggplot2)
""
install.packages("ggplot2")
install.packages("ggplot2")
getwd()
library(ggplot2)
data("diamonds")
View(diamonds)
?ggplot2
??`ggplot
1
2
?ggplot2
??ggplot
q
help
help()
??ggplot
??`ggplot2-ggproto`
??ggplot
str(ggplot)
str(diamonds)
ggplot(diamonds, aes(x,y))+ geom_point()
ggplot(diamonds, aes(x=carat,y=price))+ geom_point()
ggplot(diamonds, aes(x=carat,y=price, colour=depth))+ geom_point()
ggplot(diamonds, aes(x=carat,y=price, colour=clarity))+ geom_point()
ggplot(diamonds, aes(x=carat,y=price, colour=cut))+ geom_smooth()
ggplot(diamonds, aes(x=carat,y=price, colour=cut))+ geom_smooth(se=FALSE)
ggplot(diamonds, aes(x=carat,y=price, colour=cut, size= clarity)+ geom_smooth(se=FALSE)
)
ggplot(diamonds, aes(x=carat,y=price, colour=cut, size=clarity)+ geom_smooth(se=FALSE)
geom_point()
ggplot(diamonds, aes(x=carat,y=price, colour=clarity, shape=cut)+ geom_point()
)
ggplot(diamonds, aes(x=carat,y=price, colour=cut, size=clarity))+ geom_smooth(se=FALSE)
ggplot(diamonds, aes(x=carat,y=price, colour=cut, size=clarity))+ geom_points()
ggplot(diamonds, aes(x=carat,y=price, colour=cut, size=clarity))+ geom_point()
ggplot(diamonds, aes(x=carat,y=price, colour=cut, shape=clarity))+ geom_point()
ggplot(diamonds, aes(x=color, y=price)) + geom_violin() + scale_y_log10() + facet_wrap(~ clarity, scale="free_y")
data("WorldPhones")
View(WorldPjones)
View(WorldPhones)
wp<- melt(WorldPhones)
install.packages()
install.packages("reshape2"")
""
install.packages("reshape2")
wp<- melt(WorldPhones)
library(WorldPhones)
library(reshape2)
wp<- melt(WorldPhones)
view(wp)
head(wp)
view("wp")
wp
colnames(wp)<- c("Year", "Continent", "Phones")
head(wp)
ggplot(wp, aes(x=Continent, y= Phones)) + facet_wrap(~Year)
ggplot(wp, aes(x=Continent, y= Phones)) + facet_wrap(~Year)
ggplot(wp, aes(x=Continent, y= Phones)) + facet_wrap(~Year, scale="free_y")
ggplot(wp, aes(x=Continent, y= Phones)) + facet_wrap(~Year, scale="free_y") + geom_line()
ggplot(wp, aes(x=Continent, y= Phones)) + facet_wrap(~Year, scale="free_y") + geom_point()
ggplot(wp, aes(x=Continent, y= Phones)) + facet_wrap(~Year, scale="free_y") + geom_histogram()
install_course_github("dgrtwo", "RData", branch="quizzes", multi=TRUE)
ls()
rm(list=ls())
ls()
swirl()
View(diamonds)
ggplot(diamonds, x= z, y= price) + geom_point()
ggplot(diamonds, aes(x= z, y= price)) + geom_point()
ggplot(diamonds, aes(x= z, y= price, colour=cut())) + geom_point()
ggplot(diamonds, aes(x= z, y= price, colour=cut)) + geom_point()
ggplot(diamonds, aes(x= z, y= price, colour=cut)) + geom_point() + geom_smooth()
system.time(ggplot(diamonds, aes(x= z, y= price, colour=cut)) + geom_point() + geom_smooth()
)
data(Orange)
View(Orange)
ggplot(Orange, aes(x=age, y= circumference)) + geom_point()
ggplot(Orange, aes(x=age, y= circumference, color= Tree)) + geom_point()
ggplot(Orange, aes(x=age, y= circumference, color= Tree)) + geom_point() + geom_smooth(method = "lm")
ggplot(diamonds, aes(x=z, y= price)) + geom_point() + facet_wrap(~cut)
ggplot(diamonds, aes(x=z, y= price)) + geom_point() + facet_grid(color~cut)
ggplot(diamonds, aes(x=z, y= price)) + geom_point() + ggtitle("My Graph") + ylim(0,1000)
ggplot(Orange, aes(x=age, y= circumference)) + geom_point() + facet_wrap(~tree)
ggplot(Orange, aes(x=age, y= circumference)) + geom_point() + facet_wrap(~Tree)
qplot(diamonds$carat)
ggplot(diamonds, aes(x=carat)) + geom_histogram()
ggplot(diamonds, aes(x=carat)) + geom_histogram(binwidth = 0.5) + xlab("weight(carat)")
ggplot(diamonds, aes(x=carat)) + geom_density() + xlab("weight(carat)")
ggplot(diamonds, aes(x=carat, color=cut)) + geom_density() + xlab("weight(carat)")
ggplot(diamonds, aes(x=carat, color=clarity)) + geom_density() + xlab("weight(carat)")
data("iris")
View(iris)
ggplot(iris, aes(x=Petal.Length)) + geom_boxplot()
ggplot(iris, aes(x=Species, y=Petal.Length)) + geom_boxplot()
ggplot(iris, aes(x=Species, y=Petal.Length)) + geom_violin()
qplot(diamonds$carats, diamonds$price)
qplot(x=diamonds$carats, y=diamonds$price)
qplot(diamonds$carat, diamonds$price)
library(reshape2)
data("french_fries")
View(french_fries)
qplot
ggplot(french_fries, aes(x=treatment, y= buttery)) + geom_boxplot()
frenc_fries.m<- melt(french_fries)
?melt
frenc_fries.m<- melt(french_fries, id.vars = c("time","treatment","subject", "rep"))
frenc_fries.m<- melt(french_fries, id.vars= "potato", measure.vars = c("buttery","grassy","rancid", "painty"))
info()
frenc_fries.m<- melt(french_fries, id.vars= "potato", measure.vars = c("buttery","grassy","rancid", "painty"))
skip()
head(french_fries.m)
ggplot(french_fries.m, aes(x=treatments, y= value)) + geom_boxplot() + facet_wrap(~variable)
ggplot(french_fries.m, aes(x=treatment, y= value)) + geom_boxplot() + facet_wrap(~variable)
View(iris)
p<- ggplot(iris, aes(x=Petal.Length, y=Petal.Width)) + geom_point()
ggsave("petalsize.jpeg", p)
installed.packages(data.table)
library(data.table)
class(diamonds)
View(diamonds)
data(diamonds)
data("diamonds")
data("Orange")
class(Orange)
Orange[1,]
Orange[ ,2]
pollutantmean<- function(directory="specdata", pollutant, id=1:332)
{
allfiles <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for(i in id)
{
dat <- rbind(dat, read.csv(allfiles[i]))
}
mean(dat[ , pollutant], na.rm = TRUE)
return(mean)
}
pollutantmean("nitrate")
getwd()
pollutantmean("nitrate")
setwd("~/")
setwd("C:/Users/ABHISHEK/Downloads")
pollutantmean<- function(directory="specdata", pollutant, id=1:332)
{
allfiles <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for(i in id)
{
dat <- rbind(dat, read.csv(allfiles[i]))
}
mean(dat[ , pollutant], na.rm = TRUE)
return(mean)
}
pollutantmean("sulfate", id=1)
pollutantmean<- function(directory="specdata", pollutant, id=1:332)
{
allfiles <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for(i in id)
{
dat <- rbind(dat, read.csv(allfiles[i]))
}
mean(dat[ , pollutant], na.rm = TRUE)
}
pollutantmean("sulfate", id=1:4)
pollutantmean<- function(directory, pollutant, id=1:332)
{
allfiles <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for(i in id)
{
dat <- rbind(dat, read.csv(allfiles[i]))
}
mean(dat[ , pollutant], na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", id=1:4)
pollutantmean<- function(directory, pollutant, id=1:332)
{
allfiles <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for(i in id)
{
dat <- rbind(dat, read.csv(allfiles[i]))
}
mean(dat[ , pollutant], na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", id=1:10)
pollutantmean<- function(directory, pollutant, id=1:332)
{
allfiles <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for(i in id)
{
dat <- rbind(dat, read.csv(allfiles[i]))
}
mean(dat[ , pollutant], na.rm = TRUE)
}
pollutantmean("specdata", "nitrate", id=70:72)
pollutantmean<- function(directory, pollutant, id=1:332)
{
allfiles <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for(i in id)
{
dat <- rbind(dat, read.csv(allfiles[i]))
}
mean(dat[ , pollutant], na.rm = TRUE)
}
pollutantmean("specdata", "nitrate", id=23)
summary(dat)
pollutantmean<- function(directory="specdata", pollutant, id=1:332)
{
allfiles <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for(i in id)
{
dat <- rbind(dat, read.csv(allfiles[i]))
}
mean(dat[ , pollutant], na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", id=1:4)
pollutantmean<- function(directory="specdata", pollutant, id=1:332)
{
allfiles <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for(i in id)
{
dat <- rbind(dat, read.csv(allfiles[i]))
}
mean(dat[ , pollutant], na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", id=1:4)
getwd()
setwd("C:/Users/ABHISHEK/Documents")
library(swirl)
swirl()
print(x)
print(ggplot(diamonds,
| aes(x=carat, y=price)) + geom_point().)
print(ggplot(diamonds,
| aes(x=carat, y=price)) + geom_point())
print(ggplot(diamonds, aes(x=carat, y=price)) + geom_point()
)
pitching <- read.csv("http://dgrtwo.github.io/pages/lahman/Pitching.csv")
pitching <- read.csv("http://dgrtwo.github.io/pages/lahman/Pitching.csv")
install.packages(data.table)
install.packages("data.table")
library(data.table)
pitching<- as.data.table(pitching)
head(pitching, 5)
play()
pitching@playerID
pitching$playerID
pitching[ ,playerID]
nxt()
pitching[ ,playerID]
pitching[teamID= "OAK", ]
View(pitching)
pitching[teamID== "OAK", ]
pitching[G>=10, ]
pitching[order(yearID)]
pitching[ , list(Total.G= sum(G)), by="playerID"]
pitching[ , list(sum(G)), by="playerID"]
pitchers<- pitching[ , list(totalG = sum(G), totalBB = sum(BB)), by="playerID"]
pitchers[order(totalG)]
summarized.teams <- pitching[ , list(totalG = sum(G), totalBB = sum(BB)), by="teamID"]
View(pitching)
salaries <- read.csv("http://dgrtwo.github.io/pages/lahman/Salaries.csv")
salaries <- as.data.table(salaries)
View(salaries)
merged<- merge(pitching, salaries, by= c("yearID, "teamId, "lgID, "playerID"))
merged<- merge(pitching, salaries, by= c("yearID", "teamId", "lgID", "playerID"))
merged<- merge(pitching, salaries, by= c("yearID", "teamID", "lgID", "playerID"))
merged.all<- merge(pitching, salaries, by= c("yearID", "teamID", "lgID", "playerID"), all.x = TRUE)
nxt()
View(merged)
ggplot(merged, aes(salaries)) + geom_histogram()
skip()
ggplot(merged, aes(salary)) + geom_histogram() + scale_x_log10()
ggplot(merged, aes(teamID, salary)) + geom_point()
ggplot(merged, aes(yearID, salary)) + geom_point()
ggplot(merged, aes(yearID, salary)) + geom_point() + scale_y_log10()
ggplot(merged, aes(x=yearID, y=salary)) + geom_point() + scale_y_log10()
ggplot(merged, aes(x=yearID, y=salary)) + geom_point() + scale_y_log10() +geom_smooth()
cor.test()
cor.test(merged$log(salary), merged$yearID)
skip()
ggplot(merged, aes(lgID, salary)) + geom_boxplot() + scale_y_log10()
t.test(log(salary)~lgID, merged)
fit<- lm(log(salary)~yearID, merged)
summary(fit)
mfit= lm(log(salary) ~ yearID + ERA, merged)
summary(mfit)
?runif
runif(2)
?boxplot
?abline
?lwd
??lwd
?Devices
dev.cur()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(1.5, col="blue")
abline(h=1.5, col="blue")
abline(b=1.5, col="blue")
abline(l=1.5, col="blue")
abline(h=0.4, col="red")
5
5
abline(h=0.5, colr="green")
abline(h=0.5, col="green")
abline(h=0.5)
skip()
abline(h=0.5, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
q()
search()
demo()
getwd()
read.csv("data_unmetneed1_1.csv") -> a
head(a)
str(a)
library(ggplot2)
library(reshape2)
View(a)
ggplot(a, aes(region, sex, colour= reli)) + geom_boxplot()
ggplot(a, aes(region, colour= reli)) + geom_histogram() + facet_wrap(sex)
ggplot(a, aes(region, colour= reli)) + geom_histogram() + facet_wrap(~sex)
ggplot(a, aes(region, colour= reli)) + geom_histogram(stat = "count") + facet_wrap(~sex)
ggplot(a, aes(region, colour= reli)) + geom_histogram(tstat = "count") + facet_wrap(~sex)
ggplot(a, aes(region, colour= reli)) + geom_histogram(stat = "count") + facet_wrap(~sex)
getwd()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")head(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
best("SC", "heart attack")
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("SC", "heart attack")
##Part 2: best.R:
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
}
##Part 3: rankhospital.R:
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death
## rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
}
##Part 4: rankall.R:
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that outcome is valid
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
class(y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
